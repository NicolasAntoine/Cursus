Question 1 
def trapezoid_comp(f, a, b, n):
    h = (b - a) / n
    x = a
    I = 0
    fx = f(x)
    for _ in range(n):
        fxh = f(x + h)
        I += fx + fxh
        x += h
        fx = fxh
    return h/2 * I


Question 2
def trapezoid_rec(f, a, b, k):
    if k == 1:
        return (f(a) + f(b)) * (b - a) / 2
    n = 2 ** (k - 2)
    h = (b - a) / n
    x = a + h/2
    s = 0
    for _ in range(n):
        s += f(x)
        x += h
    return (trapezoid_rec(f, a, b, k-1) + h*s) / 2


Question 3
0.27219826128795027,17,0.2721982612879502,17

Question 4
def simpson(f, a, b, n):
    h = (b - a) / n
    x = a
    I = 0
    for _ in range(0, n, 2):
        I += f(x) + 4*f(x + h) + f(x + 2*h)
        x += 2*h
    return h/3 * I

Question 5
-1.1196854554190074,-1.2884087548681498,-1.339188110791998

Question 6
def romberg(f,a,b,n):
    H = b-a
    R = np.zeros((n, n))
    R[0, 0] = (f(a) + f(b)) * ((b - a) / 2)

    for k in range(2, n + 1):
        ks = np.arange(1, 2 ** (k - 2) + 1)
        points = a + (2 * (ks) - 1) * H / (2 ** (k - 1))
        s = H / (2 ** (k - 1)) * sum(f(points))
        R[k - 1, 0] = R[k - 2, 0] / 2 + s

        for k2 in range(2, k + 1):
            R[k - 1, k2 - 1] = (4 ** (k2 - 1) * R[k - 1, k2 - 2] - R[k - 2, k2 - 2]) / (4 ** (k2 - 1) - 1)
    return R[len(R)-1][len(R[0])-1]

Question 7
-1.36554445

Question 8
1.3599047
